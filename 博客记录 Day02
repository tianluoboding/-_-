博客内容：
● 今日学习的文章链接和视频链接
● 自己看到题目的第一想法
● 看完代码随想录之后的想法 
● 自己实现过程中遇到哪些困难 
● 今日收获，记录一下自己的学习时长

0622 第二天 
今日任务：数组理论基础，
今日题目：977.有序数组的平方 ，209.长度最小的子数组 ，59.螺旋矩阵II ，

977.有序数组的平方 
题目建议： 本题关键在于理解双指针思想 
题目链接：https://leetcode.cn/problems/squares-of-a-sorted-array/
文章讲解：https://programmercarl.com/0977.%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9.html
视频讲解： https://www.bilibili.com/video/BV1QB4y1D7ep 
‘’‘class Solution:
    def sortedSquares(self, nums: List[int]) -> List[int]:
       le, ri =0, len(nums)-1
       i = len(nums)-1
       res = [float('inf')]*len(nums)
       while le <= ri:
            if nums[le]**2 > nums[ri]**2:
                res[i] = nums[le]**2
                le += 1
            else:
                res[i] = nums[ri]**2
                ri -= 1
            i -= 1
       return res
’‘’

209.长度最小的子数组
题目建议： 本题关键在于理解滑动窗口，这个滑动窗口看文字讲解 还挺难理解的，建议大家先看视频讲解。  拓展题目可以先不做。 
题目链接：https://leetcode.cn/problems/minimum-size-subarray-sum/
文章讲解：https://programmercarl.com/0209.%E9%95%BF%E5%BA%A6%E6%9C%80%E5%B0%8F%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84.html
视频讲解：https://www.bilibili.com/video/BV1tZ4y1q7XE
‘’‘
class Solution:
    def minSubArrayLen(self, target: int, nums: List[int]) -> int:
        le, ri = 0, 0
        cur_sum = 0
        min_len = float('inf')

        while ri < len(nums):
            cur_sum += nums[ri]
            while cur_sum >= target:
                min_len = min(min_len, ri - le + 1)
                cur_sum -= nums[le]
                le += 1
            ri += 1
        return min_len if min_len != float('inf') else 0
’‘’




59.螺旋矩阵II

题目建议：  本题关键还是在转圈的逻辑，在二分搜索中提到的区间定义，在这里又用上了。 

题目链接：https://leetcode.cn/problems/spiral-matrix-ii/
文章讲解：https://programmercarl.com/0059.%E8%9E%BA%E6%97%8B%E7%9F%A9%E9%98%B5II.html
视频讲解：https://www.bilibili.com/video/BV1SL4y1N7mV/

'''class Solution:
    def generateMatrix(self, n: int) -> List[List[int]]:
        startx, starty = 0, 0
        nums = [[0]*n for _ in range(n)]
        loop = n //2
        mid = n // 2
        count = 1
        for offset in range(1, loop + 1):
            for i in range(starty, n-offset):
                nums[startx][i] = count
                count += 1
            for i in range(startx, n-offset):
                nums[i][n-offset] = count
                count += 1
            for i in range(n-offset, starty, -1):
                nums[n - offset][i] = count
                count += 1
            for i in range(n - offset, startx, -1):
                nums[i][starty] = count
                count += 1
            starty += 1
            startx += 1
        if n%2 != 0:
            nums[mid][mid] = count
        return nums

'''
