博客内容：

● 今日学习的文章链接和视频链接
● 自己看到题目的第一想法
● 看完代码随想录之后的想法 
● 自己实现过程中遇到哪些困难 
● 今日收获，记录一下自己的学习时长

0621 第一天
第一章  数组part01
今日任务：数组理论基础，
今日题目：704. 二分查找，27. 移除元素  

704. 二分查找
题目链接：https://leetcode.cn/problems/binary-search/
文章讲解：https://programmercarl.com/0704.%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE.html
视频讲解：https://www.bilibili.com/video/BV1fA4y1o715
● 第一想法
看到这个题目时，我的第一反应是使用二分查找法。这是因为题目明确说明了数组是有序且不重复的，这恰好是二分查找法的完美应用场景。二分查找法的时间复杂度为O(log n)，比起线性查找法的O(n)效率更高。
● 注意事项
在实现过程中，需要特别注意右边界的开闭问题，这是这个题目的难点，也是编写代码时需要特别关注的地方。具体来说，如果右边界是闭合的，则初始值应设置为`ri = len(nums) - 1`，并且在更新右边界时应设置为`ri = mid - 1`。而如果右边界是开放的，则初始值应设置为`ri = len(nums)`，并且在更新右边界时应设置为`ri = mid`。
在我的实现中，我选择了右边界为开放的情况，因此代码中的`ri`初始值为`len(nums)`，且在更新时设置为`ri = mid`。这种方式在处理有序数组时，能保证二分查找的效率和正确性。
● 总结
通过此次训练，我加深了对二分查找法的理解和应用。特别是在处理有序且不重复的数组时，二分查找法不仅高效，而且相对容易实现。未来在遇到类似问题时，我会更有信心地应用这一算法。
希望这篇博客能帮助大家更好地理解二分查找法在搜索问题中的应用。如果有任何疑问或建议，欢迎在评论区留言讨论！

27. 移除元素
题目链接：https://leetcode.cn/problems/remove-element/ 
文章讲解：https://programmercarl.com/0027.%E7%A7%BB%E9%99%A4%E5%85%83%E7%B4%A0.html
视频讲解：https://www.bilibili.com/video/BV12A4y1Z7LP 
● 注意事项
使用暴力法需要特别注意在遍历数组时正确地更新索引和长度，以避免跳过某些元素或出现索引越界的情况。具体来说：
每次找到需要移除的元素时，必须将索引i减1，以确保下次检查的是正确的元素。
在覆盖操作后，数组长度l要相应减1，以反映移除元素后的新长度。
● 感想
通过这次训练，我加深了对暴力法的理解，特别是在处理数组元素移除时，需要小心地处理索引的更新和数组长度的变化。在这种情况下，正确地迭代并确保i += 1是非常重要的，否则可能会导致代码逻辑出错。
