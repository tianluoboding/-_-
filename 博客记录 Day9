●151.翻转字符串里的单词
1
class Solution:
    def reverseWords(self, s: str) -> str:
        words = s.split()
        words = words[::-1]
        s = ' '.join(words)
        return s
2
class Solution:
    def reverseWords(self, s: str) -> str:
        words = s.split()
        le, ri = 0, len(words)-1
        while le < ri:
            words[le], words[ri] = words[ri], words[le]
            le += 1
            ri -= 1
        return ' '.join(words)
3
class Solution:
    def reverseWords(self, s: str) -> str:
        s = s.strip()
        s = s[::-1]
        s = ' '.join(word[::-1] for word in s.split())
        return s
4
class Solution:
    def reverseWords(self, s: str) -> str:
        words = s.split()
        reversed_words = words[::-1]
        result = ' '.join(reversed_words)

        return result

●卡码网：55.右旋转字符串
k = int(input())
n = input

s = s[len(n)-k:]+s[:len(n)-k]
print s

●28. 实现 strStr()
class Solution:
    def getNext(self, next, s):
        j = -1
        next[0] = j
        for i in range(1, len(s)):
            while j >= 0 and s[i] != s[j+1]:
                j = next[j]
            if s[i] == s[j+1]:
                j += 1
            next[i] = j
    def strStr(self, haystack: str, needle: str) -> int:
        if not needle:
            return 0
        next = [0] * len(needle)
        self.getNext(next, needle)
        j = -1
        for i in range(len(haystack)):
            while j >= 0 and haystack[i] != needle[j+1]:
                j = next[j]
            if haystack[i] == needle[j+1]:
                j += 1
            if j == len(needle) - 1:
                return i - len(needle) + 1
        return -1


